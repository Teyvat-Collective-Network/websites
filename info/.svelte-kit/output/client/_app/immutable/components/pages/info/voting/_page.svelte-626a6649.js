import { S as SvelteComponent, i as init, s as safe_not_equal, k as element, x as create_component, l as claim_element, m as children, y as claim_component, h as detach, n as attr, b as insert_hydration, z as mount_component, f as transition_in, t as transition_out, A as destroy_component, q as text, r as claim_text, G as append_hydration, C as noop } from "../../../../chunks/index-c4baf36c.js";
import { L as Linkable } from "../../../../chunks/Linkable-8089c9ad.js";
import { N as Navigation } from "../../../../chunks/Navigation-82debefb.js";
function create_default_slot(ctx) {
  let div;
  let h1;
  let t0;
  let linkable0;
  let ul0;
  let li0;
  let t1;
  let b0;
  let t2;
  let t3;
  let li1;
  let t4;
  let b1;
  let t5;
  let t6;
  let li2;
  let b2;
  let t7;
  let t8;
  let b3;
  let t9;
  let t10;
  let li3;
  let b4;
  let t11;
  let t12;
  let li4;
  let t13;
  let b5;
  let t14;
  let t15;
  let li5;
  let t16;
  let b6;
  let t17;
  let t18;
  let li6;
  let t19;
  let b7;
  let t20;
  let t21;
  let linkable1;
  let p0;
  let t22;
  let ul2;
  let li7;
  let t23;
  let li9;
  let t24;
  let ul1;
  let li8;
  let t25;
  let linkable2;
  let ul3;
  let li10;
  let t26;
  let li11;
  let t27;
  let li12;
  let t28;
  let li13;
  let t29;
  let li14;
  let t30;
  let linkable3;
  let ul4;
  let li15;
  let t31;
  let b8;
  let t32;
  let t33;
  let li16;
  let t34;
  let b9;
  let t35;
  let t36;
  let li17;
  let t37;
  let linkable4;
  let ul6;
  let li18;
  let t38;
  let li22;
  let t39;
  let ul5;
  let li19;
  let t40;
  let li20;
  let t41;
  let li21;
  let t42;
  let linkable5;
  let p1;
  let t43;
  let a;
  let t44;
  let t45;
  let ul8;
  let li23;
  let t46;
  let li27;
  let t47;
  let ul7;
  let li24;
  let t48;
  let li25;
  let t49;
  let b10;
  let t50;
  let t51;
  let b11;
  let t52;
  let t53;
  let b12;
  let t54;
  let t55;
  let li26;
  let t56;
  let linkable6;
  let ul9;
  let li28;
  let t57;
  let li29;
  let t58;
  let li30;
  let t59;
  let linkable7;
  let ul14;
  let li34;
  let b13;
  let t60;
  let ul10;
  let li31;
  let t61;
  let b14;
  let t62;
  let t63;
  let li32;
  let t64;
  let b15;
  let t65;
  let t66;
  let li33;
  let t67;
  let b16;
  let t68;
  let t69;
  let li37;
  let b17;
  let t70;
  let ul11;
  let li35;
  let t71;
  let li36;
  let t72;
  let li40;
  let b18;
  let t73;
  let ul12;
  let li38;
  let t74;
  let li39;
  let t75;
  let li48;
  let b19;
  let t76;
  let ul13;
  let li41;
  let t77;
  let li42;
  let t78;
  let li43;
  let t79;
  let code;
  let t80;
  let li44;
  let t81;
  let b20;
  let t82;
  let t83;
  let b21;
  let t84;
  let t85;
  let li45;
  let t86;
  let b22;
  let t87;
  let t88;
  let li46;
  let t89;
  let b23;
  let t90;
  let t91;
  let li47;
  let t92;
  let b24;
  let t93;
  let t94;
  let current;
  linkable0 = new Linkable({
    props: {
      id: "terminology",
      e: "h2",
      value: "Terminology"
    }
  });
  linkable1 = new Linkable({
    props: {
      id: "before-voting",
      e: "h2",
      value: "Before Voting"
    }
  });
  linkable2 = new Linkable({
    props: {
      id: "voting-procedure",
      e: "h2",
      value: "Voting Procedure"
    }
  });
  linkable3 = new Linkable({
    props: {
      id: "proposal-votes",
      e: "h3",
      value: "Proposal Votes"
    }
  });
  linkable4 = new Linkable({
    props: {
      id: "selection-votes",
      e: "h3",
      value: "Selection Votes"
    }
  });
  linkable5 = new Linkable({
    props: {
      id: "election-votes",
      e: "h3",
      value: "Election Votes"
    }
  });
  linkable6 = new Linkable({
    props: {
      id: "observer-votes",
      e: "h3",
      value: "Observer Votes"
    }
  });
  linkable7 = new Linkable({
    props: {
      id: "how-to-vote",
      e: "h2",
      value: "How To Vote"
    }
  });
  return {
    c() {
      div = element("div");
      h1 = element("h1");
      t0 = text("Voting");
      create_component(linkable0.$$.fragment);
      ul0 = element("ul");
      li0 = element("li");
      t1 = text("A ");
      b0 = element("b");
      t2 = text("minor vote");
      t3 = text(" requires 60% of eligible voters to vote to be valid. Most votes are minor.");
      li1 = element("li");
      t4 = text("A ");
      b1 = element("b");
      t5 = text("major vote");
      t6 = text(" requires 75% of eligible votesr to vote to be valid. Votes that change the rules are required to be major, and some other things may be major as well.");
      li2 = element("li");
      b2 = element("b");
      t7 = text("Quorum");
      t8 = text(" refers to the voter turnout requirement, and ");
      b3 = element("b");
      t9 = text("reaching quorum");
      t10 = text(" means having enough people vote.");
      li3 = element("li");
      b4 = element("b");
      t11 = text("Abstaining");
      t12 = text(" is an option for all votes that allows a voter to declare that they do not wish to provide input. If you believe you cannot make an unbiased decision based on what is in line with your server and the network's values, you may abstain. This counts towards quorum and counts as meeting the voting requirement.");
      li4 = element("li");
      t13 = text("A ");
      b5 = element("b");
      t14 = text("proposal vote");
      t15 = text(" is a vote for a motion where the only options are yes and no.");
      li5 = element("li");
      t16 = text("A ");
      b6 = element("b");
      t17 = text("selection vote");
      t18 = text(" is a multiple choice vote.");
      li6 = element("li");
      t19 = text("An ");
      b7 = element("b");
      t20 = text("election vote");
      t21 = text(" is a ranked multiple choice vote for electing observers.");
      create_component(linkable1.$$.fragment);
      p0 = element("p");
      t22 = text("Votes must be presented to the council for at least 24 hours before they can be started, and any concerns raised must be addressed first.");
      ul2 = element("ul");
      li7 = element("li");
      t23 = text("This excludes procedural votes like elections, inductions, and counter-votes as protected by the rules, which can be started as soon as their individual conditions are met.");
      li9 = element("li");
      t24 = text("In the case of a removal vote, documentation presented against the user or server must be made available to the subject for at least 7 days to allow time to respond (up to a 1 week extension is protected if the involved parties are on break).");
      ul1 = element("ul");
      li8 = element("li");
      t25 = text("Once the response has been provided, at least 2 days must be given for the council to read the presented information and response and raise any concerns or discuss the topic before any removal votes or actions votes may be started.");
      create_component(linkable2.$$.fragment);
      ul3 = element("ul");
      li10 = element("li");
      t26 = text("Information required to make an informed decision will be included with the vote.");
      li11 = element("li");
      t27 = text("Votes will be open for 48 hours (or more) and an automatic reminder will be sent to missing voters at least 24 hours before the vote closes.");
      li12 = element("li");
      t28 = text("If quorum is not reached or the vote is tied, the vote will be extended by 48 hours once.");
      li13 = element("li");
      t29 = text("If the above happens a second time, an observer vote will resolve the issue.");
      li14 = element("li");
      t30 = text("Abstaining counts as voting for the purposes of quorum and the member requirement to vote.");
      create_component(linkable3.$$.fragment);
      ul4 = element("ul");
      li15 = element("li");
      t31 = text("If ");
      b8 = element("b");
      t32 = text("≥60%");
      t33 = text(" of votes are in favor, the motion passes.");
      li16 = element("li");
      t34 = text("If ");
      b9 = element("b");
      t35 = text("≤40%");
      t36 = text(" of votes are in favor, the motion fails.");
      li17 = element("li");
      t37 = text("If the approval is between 40% and 60%, the vote is considered a tie.");
      create_component(linkable4.$$.fragment);
      ul6 = element("ul");
      li18 = element("li");
      t38 = text("The most popular option, even if not a majority, is selected, and a tie only occurs if it is a tie for #1 (unless otherwise specified).");
      li22 = element("li");
      t39 = text("For induction votes:");
      ul5 = element("ul");
      li19 = element("li");
      t40 = text(`If the server's mascot character is not confirmed as playable, the "Induct Now" and "Induct Later" options are first counted together.`);
      li20 = element("li");
      t41 = text("If the induct options together are the most popular option, the server is accepted, and then the two options are weighed against each other like a proposal vote to decide if the induction happens immediately or is postponed.");
      li21 = element("li");
      t42 = text("If the above ties, the re-vote will only include the two induct options.");
      create_component(linkable5.$$.fragment);
      p1 = element("p");
      t43 = text("See more information on elections themselves ");
      a = element("a");
      t44 = text("here");
      t45 = text(".");
      ul8 = element("ul");
      li23 = element("li");
      t46 = text("If only one candidate exists, there will just be a proposal vote to decide if they will be elected.");
      li27 = element("li");
      t47 = text("Otherwise, a ranked vote will be held.");
      ul7 = element("ul");
      li24 = element("li");
      t48 = text("Even if there is only one spot, rank all candidates, as if your first choice isn't the winner, your second choice will still affect the results.");
      li25 = element("li");
      t49 = text("To tally the votes, each candidate will be assigned a score which is the sum of their points from each ballot. Ranking a user with an ");
      b10 = element("b");
      t50 = text("X");
      t51 = text(" gives that user ");
      b11 = element("b");
      t52 = text("candidate count - X");
      t53 = text(" points. Any users with a ");
      b12 = element("b");
      t54 = text("<50%");
      t55 = text(" approval rating are dropped out and the top remaining users win the election.");
      li26 = element("li");
      t56 = text("The results will display the winning candidates in alphabetical order but do not display the actual ranking.");
      create_component(linkable6.$$.fragment);
      ul9 = element("ul");
      li28 = element("li");
      t57 = text("If the primary council cannot make a decision due to failure to reach quorum or the inability to resolve a tie, the observer committee will make a determination to resolve the deadlock.");
      li29 = element("li");
      t58 = text("All observers must vote (or abstain) and the majority decision will be the final determination.");
      li30 = element("li");
      t59 = text("If the observers tie, they are expected to have a discussion, either privately or publicly, to weigh out the impacts and come to an agreement. The decision must be resolved at this stage; there is no higher authority that can make the final call.");
      create_component(linkable7.$$.fragment);
      ul14 = element("ul");
      li34 = element("li");
      b13 = element("b");
      t60 = text("All Votes");
      ul10 = element("ul");
      li31 = element("li");
      t61 = text("Click ");
      b14 = element("b");
      t62 = text("Abstain");
      t63 = text(" to submit a blank ballot.");
      li32 = element("li");
      t64 = text("Click ");
      b15 = element("b");
      t65 = text("View Your Vote");
      t66 = text(" to see what you have currently voted.");
      li33 = element("li");
      t67 = text("Click ");
      b16 = element("b");
      t68 = text("List Voters");
      t69 = text(" to see a list of voters. If the vote is anonymous, only observers can use this to check who has voted but not for what. If the vote is not, anyone can use this to see what everyone has voted for.");
      li37 = element("li");
      b17 = element("b");
      t70 = text("Proposal Votes");
      ul11 = element("ul");
      li35 = element("li");
      t71 = text("Click the up or down arrow to vote for or against the motion.");
      li36 = element("li");
      t72 = text("Make sure you read the proposal carefully so you know which direction the vote is in. For example, for votes to reject servers before observation, voting in favor means in favor of rejection.");
      li40 = element("li");
      b18 = element("b");
      t73 = text("Selection Votes");
      ul12 = element("ul");
      li38 = element("li");
      t74 = text("Click the dropdown and select your desired option(s).");
      li39 = element("li");
      t75 = text("Most selection votes will just allow a single selection, but the functionality exists for multi-selection votes.");
      li48 = element("li");
      b19 = element("b");
      t76 = text("Election Votes");
      ul13 = element("ul");
      li41 = element("li");
      t77 = text("To vote, click the button and a popup will be generated where you can fill in your vote.");
      li42 = element("li");
      t78 = text("If you are editing your vote, your previous vote will be filled into the popup so you don't need to redo everything.");
      li43 = element("li");
      t79 = text("The popup will contain many lines in the format ");
      code = element("code");
      t80 = text("[candidate name]: [#]");
      li44 = element("li");
      t81 = text("To rank candidates, put a ");
      b20 = element("b");
      t82 = text("1");
      t83 = text(" next to your most preferred candidate, a ");
      b21 = element("b");
      t84 = text("2");
      t85 = text(" next to the second, etc.");
      li45 = element("li");
      t86 = text("Enter ");
      b22 = element("b");
      t87 = text("0");
      t88 = text(" to abstain from voting on a candidate.");
      li46 = element("li");
      t89 = text("Enter ");
      b23 = element("b");
      t90 = text("-1");
      t91 = text(" to vote against a candidate.");
      li47 = element("li");
      t92 = text("Abstaining on the vote itself is no different from entering ");
      b24 = element("b");
      t93 = text("0");
      t94 = text(" for every candidate.");
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { id: true });
      var div_nodes = children(div);
      h1 = claim_element(div_nodes, "H1", {});
      var h1_nodes = children(h1);
      t0 = claim_text(h1_nodes, "Voting");
      h1_nodes.forEach(detach);
      claim_component(linkable0.$$.fragment, div_nodes);
      ul0 = claim_element(div_nodes, "UL", {});
      var ul0_nodes = children(ul0);
      li0 = claim_element(ul0_nodes, "LI", {});
      var li0_nodes = children(li0);
      t1 = claim_text(li0_nodes, "A ");
      b0 = claim_element(li0_nodes, "B", {});
      var b0_nodes = children(b0);
      t2 = claim_text(b0_nodes, "minor vote");
      b0_nodes.forEach(detach);
      t3 = claim_text(li0_nodes, " requires 60% of eligible voters to vote to be valid. Most votes are minor.");
      li0_nodes.forEach(detach);
      li1 = claim_element(ul0_nodes, "LI", {});
      var li1_nodes = children(li1);
      t4 = claim_text(li1_nodes, "A ");
      b1 = claim_element(li1_nodes, "B", {});
      var b1_nodes = children(b1);
      t5 = claim_text(b1_nodes, "major vote");
      b1_nodes.forEach(detach);
      t6 = claim_text(li1_nodes, " requires 75% of eligible votesr to vote to be valid. Votes that change the rules are required to be major, and some other things may be major as well.");
      li1_nodes.forEach(detach);
      li2 = claim_element(ul0_nodes, "LI", {});
      var li2_nodes = children(li2);
      b2 = claim_element(li2_nodes, "B", {});
      var b2_nodes = children(b2);
      t7 = claim_text(b2_nodes, "Quorum");
      b2_nodes.forEach(detach);
      t8 = claim_text(li2_nodes, " refers to the voter turnout requirement, and ");
      b3 = claim_element(li2_nodes, "B", {});
      var b3_nodes = children(b3);
      t9 = claim_text(b3_nodes, "reaching quorum");
      b3_nodes.forEach(detach);
      t10 = claim_text(li2_nodes, " means having enough people vote.");
      li2_nodes.forEach(detach);
      li3 = claim_element(ul0_nodes, "LI", {});
      var li3_nodes = children(li3);
      b4 = claim_element(li3_nodes, "B", {});
      var b4_nodes = children(b4);
      t11 = claim_text(b4_nodes, "Abstaining");
      b4_nodes.forEach(detach);
      t12 = claim_text(li3_nodes, " is an option for all votes that allows a voter to declare that they do not wish to provide input. If you believe you cannot make an unbiased decision based on what is in line with your server and the network's values, you may abstain. This counts towards quorum and counts as meeting the voting requirement.");
      li3_nodes.forEach(detach);
      li4 = claim_element(ul0_nodes, "LI", {});
      var li4_nodes = children(li4);
      t13 = claim_text(li4_nodes, "A ");
      b5 = claim_element(li4_nodes, "B", {});
      var b5_nodes = children(b5);
      t14 = claim_text(b5_nodes, "proposal vote");
      b5_nodes.forEach(detach);
      t15 = claim_text(li4_nodes, " is a vote for a motion where the only options are yes and no.");
      li4_nodes.forEach(detach);
      li5 = claim_element(ul0_nodes, "LI", {});
      var li5_nodes = children(li5);
      t16 = claim_text(li5_nodes, "A ");
      b6 = claim_element(li5_nodes, "B", {});
      var b6_nodes = children(b6);
      t17 = claim_text(b6_nodes, "selection vote");
      b6_nodes.forEach(detach);
      t18 = claim_text(li5_nodes, " is a multiple choice vote.");
      li5_nodes.forEach(detach);
      li6 = claim_element(ul0_nodes, "LI", {});
      var li6_nodes = children(li6);
      t19 = claim_text(li6_nodes, "An ");
      b7 = claim_element(li6_nodes, "B", {});
      var b7_nodes = children(b7);
      t20 = claim_text(b7_nodes, "election vote");
      b7_nodes.forEach(detach);
      t21 = claim_text(li6_nodes, " is a ranked multiple choice vote for electing observers.");
      li6_nodes.forEach(detach);
      ul0_nodes.forEach(detach);
      claim_component(linkable1.$$.fragment, div_nodes);
      p0 = claim_element(div_nodes, "P", {});
      var p0_nodes = children(p0);
      t22 = claim_text(p0_nodes, "Votes must be presented to the council for at least 24 hours before they can be started, and any concerns raised must be addressed first.");
      p0_nodes.forEach(detach);
      ul2 = claim_element(div_nodes, "UL", {});
      var ul2_nodes = children(ul2);
      li7 = claim_element(ul2_nodes, "LI", {});
      var li7_nodes = children(li7);
      t23 = claim_text(li7_nodes, "This excludes procedural votes like elections, inductions, and counter-votes as protected by the rules, which can be started as soon as their individual conditions are met.");
      li7_nodes.forEach(detach);
      li9 = claim_element(ul2_nodes, "LI", {});
      var li9_nodes = children(li9);
      t24 = claim_text(li9_nodes, "In the case of a removal vote, documentation presented against the user or server must be made available to the subject for at least 7 days to allow time to respond (up to a 1 week extension is protected if the involved parties are on break).");
      ul1 = claim_element(li9_nodes, "UL", {});
      var ul1_nodes = children(ul1);
      li8 = claim_element(ul1_nodes, "LI", {});
      var li8_nodes = children(li8);
      t25 = claim_text(li8_nodes, "Once the response has been provided, at least 2 days must be given for the council to read the presented information and response and raise any concerns or discuss the topic before any removal votes or actions votes may be started.");
      li8_nodes.forEach(detach);
      ul1_nodes.forEach(detach);
      li9_nodes.forEach(detach);
      ul2_nodes.forEach(detach);
      claim_component(linkable2.$$.fragment, div_nodes);
      ul3 = claim_element(div_nodes, "UL", {});
      var ul3_nodes = children(ul3);
      li10 = claim_element(ul3_nodes, "LI", {});
      var li10_nodes = children(li10);
      t26 = claim_text(li10_nodes, "Information required to make an informed decision will be included with the vote.");
      li10_nodes.forEach(detach);
      li11 = claim_element(ul3_nodes, "LI", {});
      var li11_nodes = children(li11);
      t27 = claim_text(li11_nodes, "Votes will be open for 48 hours (or more) and an automatic reminder will be sent to missing voters at least 24 hours before the vote closes.");
      li11_nodes.forEach(detach);
      li12 = claim_element(ul3_nodes, "LI", {});
      var li12_nodes = children(li12);
      t28 = claim_text(li12_nodes, "If quorum is not reached or the vote is tied, the vote will be extended by 48 hours once.");
      li12_nodes.forEach(detach);
      li13 = claim_element(ul3_nodes, "LI", {});
      var li13_nodes = children(li13);
      t29 = claim_text(li13_nodes, "If the above happens a second time, an observer vote will resolve the issue.");
      li13_nodes.forEach(detach);
      li14 = claim_element(ul3_nodes, "LI", {});
      var li14_nodes = children(li14);
      t30 = claim_text(li14_nodes, "Abstaining counts as voting for the purposes of quorum and the member requirement to vote.");
      li14_nodes.forEach(detach);
      ul3_nodes.forEach(detach);
      claim_component(linkable3.$$.fragment, div_nodes);
      ul4 = claim_element(div_nodes, "UL", {});
      var ul4_nodes = children(ul4);
      li15 = claim_element(ul4_nodes, "LI", {});
      var li15_nodes = children(li15);
      t31 = claim_text(li15_nodes, "If ");
      b8 = claim_element(li15_nodes, "B", {});
      var b8_nodes = children(b8);
      t32 = claim_text(b8_nodes, "≥60%");
      b8_nodes.forEach(detach);
      t33 = claim_text(li15_nodes, " of votes are in favor, the motion passes.");
      li15_nodes.forEach(detach);
      li16 = claim_element(ul4_nodes, "LI", {});
      var li16_nodes = children(li16);
      t34 = claim_text(li16_nodes, "If ");
      b9 = claim_element(li16_nodes, "B", {});
      var b9_nodes = children(b9);
      t35 = claim_text(b9_nodes, "≤40%");
      b9_nodes.forEach(detach);
      t36 = claim_text(li16_nodes, " of votes are in favor, the motion fails.");
      li16_nodes.forEach(detach);
      li17 = claim_element(ul4_nodes, "LI", {});
      var li17_nodes = children(li17);
      t37 = claim_text(li17_nodes, "If the approval is between 40% and 60%, the vote is considered a tie.");
      li17_nodes.forEach(detach);
      ul4_nodes.forEach(detach);
      claim_component(linkable4.$$.fragment, div_nodes);
      ul6 = claim_element(div_nodes, "UL", {});
      var ul6_nodes = children(ul6);
      li18 = claim_element(ul6_nodes, "LI", {});
      var li18_nodes = children(li18);
      t38 = claim_text(li18_nodes, "The most popular option, even if not a majority, is selected, and a tie only occurs if it is a tie for #1 (unless otherwise specified).");
      li18_nodes.forEach(detach);
      li22 = claim_element(ul6_nodes, "LI", {});
      var li22_nodes = children(li22);
      t39 = claim_text(li22_nodes, "For induction votes:");
      ul5 = claim_element(li22_nodes, "UL", {});
      var ul5_nodes = children(ul5);
      li19 = claim_element(ul5_nodes, "LI", {});
      var li19_nodes = children(li19);
      t40 = claim_text(li19_nodes, `If the server's mascot character is not confirmed as playable, the "Induct Now" and "Induct Later" options are first counted together.`);
      li19_nodes.forEach(detach);
      li20 = claim_element(ul5_nodes, "LI", {});
      var li20_nodes = children(li20);
      t41 = claim_text(li20_nodes, "If the induct options together are the most popular option, the server is accepted, and then the two options are weighed against each other like a proposal vote to decide if the induction happens immediately or is postponed.");
      li20_nodes.forEach(detach);
      li21 = claim_element(ul5_nodes, "LI", {});
      var li21_nodes = children(li21);
      t42 = claim_text(li21_nodes, "If the above ties, the re-vote will only include the two induct options.");
      li21_nodes.forEach(detach);
      ul5_nodes.forEach(detach);
      li22_nodes.forEach(detach);
      ul6_nodes.forEach(detach);
      claim_component(linkable5.$$.fragment, div_nodes);
      p1 = claim_element(div_nodes, "P", {});
      var p1_nodes = children(p1);
      t43 = claim_text(p1_nodes, "See more information on elections themselves ");
      a = claim_element(p1_nodes, "A", { href: true });
      var a_nodes = children(a);
      t44 = claim_text(a_nodes, "here");
      a_nodes.forEach(detach);
      t45 = claim_text(p1_nodes, ".");
      p1_nodes.forEach(detach);
      ul8 = claim_element(div_nodes, "UL", {});
      var ul8_nodes = children(ul8);
      li23 = claim_element(ul8_nodes, "LI", {});
      var li23_nodes = children(li23);
      t46 = claim_text(li23_nodes, "If only one candidate exists, there will just be a proposal vote to decide if they will be elected.");
      li23_nodes.forEach(detach);
      li27 = claim_element(ul8_nodes, "LI", {});
      var li27_nodes = children(li27);
      t47 = claim_text(li27_nodes, "Otherwise, a ranked vote will be held.");
      ul7 = claim_element(li27_nodes, "UL", {});
      var ul7_nodes = children(ul7);
      li24 = claim_element(ul7_nodes, "LI", {});
      var li24_nodes = children(li24);
      t48 = claim_text(li24_nodes, "Even if there is only one spot, rank all candidates, as if your first choice isn't the winner, your second choice will still affect the results.");
      li24_nodes.forEach(detach);
      li25 = claim_element(ul7_nodes, "LI", {});
      var li25_nodes = children(li25);
      t49 = claim_text(li25_nodes, "To tally the votes, each candidate will be assigned a score which is the sum of their points from each ballot. Ranking a user with an ");
      b10 = claim_element(li25_nodes, "B", {});
      var b10_nodes = children(b10);
      t50 = claim_text(b10_nodes, "X");
      b10_nodes.forEach(detach);
      t51 = claim_text(li25_nodes, " gives that user ");
      b11 = claim_element(li25_nodes, "B", {});
      var b11_nodes = children(b11);
      t52 = claim_text(b11_nodes, "candidate count - X");
      b11_nodes.forEach(detach);
      t53 = claim_text(li25_nodes, " points. Any users with a ");
      b12 = claim_element(li25_nodes, "B", {});
      var b12_nodes = children(b12);
      t54 = claim_text(b12_nodes, "<50%");
      b12_nodes.forEach(detach);
      t55 = claim_text(li25_nodes, " approval rating are dropped out and the top remaining users win the election.");
      li25_nodes.forEach(detach);
      li26 = claim_element(ul7_nodes, "LI", {});
      var li26_nodes = children(li26);
      t56 = claim_text(li26_nodes, "The results will display the winning candidates in alphabetical order but do not display the actual ranking.");
      li26_nodes.forEach(detach);
      ul7_nodes.forEach(detach);
      li27_nodes.forEach(detach);
      ul8_nodes.forEach(detach);
      claim_component(linkable6.$$.fragment, div_nodes);
      ul9 = claim_element(div_nodes, "UL", {});
      var ul9_nodes = children(ul9);
      li28 = claim_element(ul9_nodes, "LI", {});
      var li28_nodes = children(li28);
      t57 = claim_text(li28_nodes, "If the primary council cannot make a decision due to failure to reach quorum or the inability to resolve a tie, the observer committee will make a determination to resolve the deadlock.");
      li28_nodes.forEach(detach);
      li29 = claim_element(ul9_nodes, "LI", {});
      var li29_nodes = children(li29);
      t58 = claim_text(li29_nodes, "All observers must vote (or abstain) and the majority decision will be the final determination.");
      li29_nodes.forEach(detach);
      li30 = claim_element(ul9_nodes, "LI", {});
      var li30_nodes = children(li30);
      t59 = claim_text(li30_nodes, "If the observers tie, they are expected to have a discussion, either privately or publicly, to weigh out the impacts and come to an agreement. The decision must be resolved at this stage; there is no higher authority that can make the final call.");
      li30_nodes.forEach(detach);
      ul9_nodes.forEach(detach);
      claim_component(linkable7.$$.fragment, div_nodes);
      ul14 = claim_element(div_nodes, "UL", {});
      var ul14_nodes = children(ul14);
      li34 = claim_element(ul14_nodes, "LI", {});
      var li34_nodes = children(li34);
      b13 = claim_element(li34_nodes, "B", {});
      var b13_nodes = children(b13);
      t60 = claim_text(b13_nodes, "All Votes");
      b13_nodes.forEach(detach);
      ul10 = claim_element(li34_nodes, "UL", {});
      var ul10_nodes = children(ul10);
      li31 = claim_element(ul10_nodes, "LI", {});
      var li31_nodes = children(li31);
      t61 = claim_text(li31_nodes, "Click ");
      b14 = claim_element(li31_nodes, "B", {});
      var b14_nodes = children(b14);
      t62 = claim_text(b14_nodes, "Abstain");
      b14_nodes.forEach(detach);
      t63 = claim_text(li31_nodes, " to submit a blank ballot.");
      li31_nodes.forEach(detach);
      li32 = claim_element(ul10_nodes, "LI", {});
      var li32_nodes = children(li32);
      t64 = claim_text(li32_nodes, "Click ");
      b15 = claim_element(li32_nodes, "B", {});
      var b15_nodes = children(b15);
      t65 = claim_text(b15_nodes, "View Your Vote");
      b15_nodes.forEach(detach);
      t66 = claim_text(li32_nodes, " to see what you have currently voted.");
      li32_nodes.forEach(detach);
      li33 = claim_element(ul10_nodes, "LI", {});
      var li33_nodes = children(li33);
      t67 = claim_text(li33_nodes, "Click ");
      b16 = claim_element(li33_nodes, "B", {});
      var b16_nodes = children(b16);
      t68 = claim_text(b16_nodes, "List Voters");
      b16_nodes.forEach(detach);
      t69 = claim_text(li33_nodes, " to see a list of voters. If the vote is anonymous, only observers can use this to check who has voted but not for what. If the vote is not, anyone can use this to see what everyone has voted for.");
      li33_nodes.forEach(detach);
      ul10_nodes.forEach(detach);
      li34_nodes.forEach(detach);
      li37 = claim_element(ul14_nodes, "LI", {});
      var li37_nodes = children(li37);
      b17 = claim_element(li37_nodes, "B", {});
      var b17_nodes = children(b17);
      t70 = claim_text(b17_nodes, "Proposal Votes");
      b17_nodes.forEach(detach);
      ul11 = claim_element(li37_nodes, "UL", {});
      var ul11_nodes = children(ul11);
      li35 = claim_element(ul11_nodes, "LI", {});
      var li35_nodes = children(li35);
      t71 = claim_text(li35_nodes, "Click the up or down arrow to vote for or against the motion.");
      li35_nodes.forEach(detach);
      li36 = claim_element(ul11_nodes, "LI", {});
      var li36_nodes = children(li36);
      t72 = claim_text(li36_nodes, "Make sure you read the proposal carefully so you know which direction the vote is in. For example, for votes to reject servers before observation, voting in favor means in favor of rejection.");
      li36_nodes.forEach(detach);
      ul11_nodes.forEach(detach);
      li37_nodes.forEach(detach);
      li40 = claim_element(ul14_nodes, "LI", {});
      var li40_nodes = children(li40);
      b18 = claim_element(li40_nodes, "B", {});
      var b18_nodes = children(b18);
      t73 = claim_text(b18_nodes, "Selection Votes");
      b18_nodes.forEach(detach);
      ul12 = claim_element(li40_nodes, "UL", {});
      var ul12_nodes = children(ul12);
      li38 = claim_element(ul12_nodes, "LI", {});
      var li38_nodes = children(li38);
      t74 = claim_text(li38_nodes, "Click the dropdown and select your desired option(s).");
      li38_nodes.forEach(detach);
      li39 = claim_element(ul12_nodes, "LI", {});
      var li39_nodes = children(li39);
      t75 = claim_text(li39_nodes, "Most selection votes will just allow a single selection, but the functionality exists for multi-selection votes.");
      li39_nodes.forEach(detach);
      ul12_nodes.forEach(detach);
      li40_nodes.forEach(detach);
      li48 = claim_element(ul14_nodes, "LI", {});
      var li48_nodes = children(li48);
      b19 = claim_element(li48_nodes, "B", {});
      var b19_nodes = children(b19);
      t76 = claim_text(b19_nodes, "Election Votes");
      b19_nodes.forEach(detach);
      ul13 = claim_element(li48_nodes, "UL", {});
      var ul13_nodes = children(ul13);
      li41 = claim_element(ul13_nodes, "LI", {});
      var li41_nodes = children(li41);
      t77 = claim_text(li41_nodes, "To vote, click the button and a popup will be generated where you can fill in your vote.");
      li41_nodes.forEach(detach);
      li42 = claim_element(ul13_nodes, "LI", {});
      var li42_nodes = children(li42);
      t78 = claim_text(li42_nodes, "If you are editing your vote, your previous vote will be filled into the popup so you don't need to redo everything.");
      li42_nodes.forEach(detach);
      li43 = claim_element(ul13_nodes, "LI", {});
      var li43_nodes = children(li43);
      t79 = claim_text(li43_nodes, "The popup will contain many lines in the format ");
      code = claim_element(li43_nodes, "CODE", {});
      var code_nodes = children(code);
      t80 = claim_text(code_nodes, "[candidate name]: [#]");
      code_nodes.forEach(detach);
      li43_nodes.forEach(detach);
      li44 = claim_element(ul13_nodes, "LI", {});
      var li44_nodes = children(li44);
      t81 = claim_text(li44_nodes, "To rank candidates, put a ");
      b20 = claim_element(li44_nodes, "B", {});
      var b20_nodes = children(b20);
      t82 = claim_text(b20_nodes, "1");
      b20_nodes.forEach(detach);
      t83 = claim_text(li44_nodes, " next to your most preferred candidate, a ");
      b21 = claim_element(li44_nodes, "B", {});
      var b21_nodes = children(b21);
      t84 = claim_text(b21_nodes, "2");
      b21_nodes.forEach(detach);
      t85 = claim_text(li44_nodes, " next to the second, etc.");
      li44_nodes.forEach(detach);
      li45 = claim_element(ul13_nodes, "LI", {});
      var li45_nodes = children(li45);
      t86 = claim_text(li45_nodes, "Enter ");
      b22 = claim_element(li45_nodes, "B", {});
      var b22_nodes = children(b22);
      t87 = claim_text(b22_nodes, "0");
      b22_nodes.forEach(detach);
      t88 = claim_text(li45_nodes, " to abstain from voting on a candidate.");
      li45_nodes.forEach(detach);
      li46 = claim_element(ul13_nodes, "LI", {});
      var li46_nodes = children(li46);
      t89 = claim_text(li46_nodes, "Enter ");
      b23 = claim_element(li46_nodes, "B", {});
      var b23_nodes = children(b23);
      t90 = claim_text(b23_nodes, "-1");
      b23_nodes.forEach(detach);
      t91 = claim_text(li46_nodes, " to vote against a candidate.");
      li46_nodes.forEach(detach);
      li47 = claim_element(ul13_nodes, "LI", {});
      var li47_nodes = children(li47);
      t92 = claim_text(li47_nodes, "Abstaining on the vote itself is no different from entering ");
      b24 = claim_element(li47_nodes, "B", {});
      var b24_nodes = children(b24);
      t93 = claim_text(b24_nodes, "0");
      b24_nodes.forEach(detach);
      t94 = claim_text(li47_nodes, " for every candidate.");
      li47_nodes.forEach(detach);
      ul13_nodes.forEach(detach);
      li48_nodes.forEach(detach);
      ul14_nodes.forEach(detach);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(a, "href", "/info/procedures");
      attr(div, "id", "main");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      append_hydration(div, h1);
      append_hydration(h1, t0);
      mount_component(linkable0, div, null);
      append_hydration(div, ul0);
      append_hydration(ul0, li0);
      append_hydration(li0, t1);
      append_hydration(li0, b0);
      append_hydration(b0, t2);
      append_hydration(li0, t3);
      append_hydration(ul0, li1);
      append_hydration(li1, t4);
      append_hydration(li1, b1);
      append_hydration(b1, t5);
      append_hydration(li1, t6);
      append_hydration(ul0, li2);
      append_hydration(li2, b2);
      append_hydration(b2, t7);
      append_hydration(li2, t8);
      append_hydration(li2, b3);
      append_hydration(b3, t9);
      append_hydration(li2, t10);
      append_hydration(ul0, li3);
      append_hydration(li3, b4);
      append_hydration(b4, t11);
      append_hydration(li3, t12);
      append_hydration(ul0, li4);
      append_hydration(li4, t13);
      append_hydration(li4, b5);
      append_hydration(b5, t14);
      append_hydration(li4, t15);
      append_hydration(ul0, li5);
      append_hydration(li5, t16);
      append_hydration(li5, b6);
      append_hydration(b6, t17);
      append_hydration(li5, t18);
      append_hydration(ul0, li6);
      append_hydration(li6, t19);
      append_hydration(li6, b7);
      append_hydration(b7, t20);
      append_hydration(li6, t21);
      mount_component(linkable1, div, null);
      append_hydration(div, p0);
      append_hydration(p0, t22);
      append_hydration(div, ul2);
      append_hydration(ul2, li7);
      append_hydration(li7, t23);
      append_hydration(ul2, li9);
      append_hydration(li9, t24);
      append_hydration(li9, ul1);
      append_hydration(ul1, li8);
      append_hydration(li8, t25);
      mount_component(linkable2, div, null);
      append_hydration(div, ul3);
      append_hydration(ul3, li10);
      append_hydration(li10, t26);
      append_hydration(ul3, li11);
      append_hydration(li11, t27);
      append_hydration(ul3, li12);
      append_hydration(li12, t28);
      append_hydration(ul3, li13);
      append_hydration(li13, t29);
      append_hydration(ul3, li14);
      append_hydration(li14, t30);
      mount_component(linkable3, div, null);
      append_hydration(div, ul4);
      append_hydration(ul4, li15);
      append_hydration(li15, t31);
      append_hydration(li15, b8);
      append_hydration(b8, t32);
      append_hydration(li15, t33);
      append_hydration(ul4, li16);
      append_hydration(li16, t34);
      append_hydration(li16, b9);
      append_hydration(b9, t35);
      append_hydration(li16, t36);
      append_hydration(ul4, li17);
      append_hydration(li17, t37);
      mount_component(linkable4, div, null);
      append_hydration(div, ul6);
      append_hydration(ul6, li18);
      append_hydration(li18, t38);
      append_hydration(ul6, li22);
      append_hydration(li22, t39);
      append_hydration(li22, ul5);
      append_hydration(ul5, li19);
      append_hydration(li19, t40);
      append_hydration(ul5, li20);
      append_hydration(li20, t41);
      append_hydration(ul5, li21);
      append_hydration(li21, t42);
      mount_component(linkable5, div, null);
      append_hydration(div, p1);
      append_hydration(p1, t43);
      append_hydration(p1, a);
      append_hydration(a, t44);
      append_hydration(p1, t45);
      append_hydration(div, ul8);
      append_hydration(ul8, li23);
      append_hydration(li23, t46);
      append_hydration(ul8, li27);
      append_hydration(li27, t47);
      append_hydration(li27, ul7);
      append_hydration(ul7, li24);
      append_hydration(li24, t48);
      append_hydration(ul7, li25);
      append_hydration(li25, t49);
      append_hydration(li25, b10);
      append_hydration(b10, t50);
      append_hydration(li25, t51);
      append_hydration(li25, b11);
      append_hydration(b11, t52);
      append_hydration(li25, t53);
      append_hydration(li25, b12);
      append_hydration(b12, t54);
      append_hydration(li25, t55);
      append_hydration(ul7, li26);
      append_hydration(li26, t56);
      mount_component(linkable6, div, null);
      append_hydration(div, ul9);
      append_hydration(ul9, li28);
      append_hydration(li28, t57);
      append_hydration(ul9, li29);
      append_hydration(li29, t58);
      append_hydration(ul9, li30);
      append_hydration(li30, t59);
      mount_component(linkable7, div, null);
      append_hydration(div, ul14);
      append_hydration(ul14, li34);
      append_hydration(li34, b13);
      append_hydration(b13, t60);
      append_hydration(li34, ul10);
      append_hydration(ul10, li31);
      append_hydration(li31, t61);
      append_hydration(li31, b14);
      append_hydration(b14, t62);
      append_hydration(li31, t63);
      append_hydration(ul10, li32);
      append_hydration(li32, t64);
      append_hydration(li32, b15);
      append_hydration(b15, t65);
      append_hydration(li32, t66);
      append_hydration(ul10, li33);
      append_hydration(li33, t67);
      append_hydration(li33, b16);
      append_hydration(b16, t68);
      append_hydration(li33, t69);
      append_hydration(ul14, li37);
      append_hydration(li37, b17);
      append_hydration(b17, t70);
      append_hydration(li37, ul11);
      append_hydration(ul11, li35);
      append_hydration(li35, t71);
      append_hydration(ul11, li36);
      append_hydration(li36, t72);
      append_hydration(ul14, li40);
      append_hydration(li40, b18);
      append_hydration(b18, t73);
      append_hydration(li40, ul12);
      append_hydration(ul12, li38);
      append_hydration(li38, t74);
      append_hydration(ul12, li39);
      append_hydration(li39, t75);
      append_hydration(ul14, li48);
      append_hydration(li48, b19);
      append_hydration(b19, t76);
      append_hydration(li48, ul13);
      append_hydration(ul13, li41);
      append_hydration(li41, t77);
      append_hydration(ul13, li42);
      append_hydration(li42, t78);
      append_hydration(ul13, li43);
      append_hydration(li43, t79);
      append_hydration(li43, code);
      append_hydration(code, t80);
      append_hydration(ul13, li44);
      append_hydration(li44, t81);
      append_hydration(li44, b20);
      append_hydration(b20, t82);
      append_hydration(li44, t83);
      append_hydration(li44, b21);
      append_hydration(b21, t84);
      append_hydration(li44, t85);
      append_hydration(ul13, li45);
      append_hydration(li45, t86);
      append_hydration(li45, b22);
      append_hydration(b22, t87);
      append_hydration(li45, t88);
      append_hydration(ul13, li46);
      append_hydration(li46, t89);
      append_hydration(li46, b23);
      append_hydration(b23, t90);
      append_hydration(li46, t91);
      append_hydration(ul13, li47);
      append_hydration(li47, t92);
      append_hydration(li47, b24);
      append_hydration(b24, t93);
      append_hydration(li47, t94);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(linkable0.$$.fragment, local);
      transition_in(linkable1.$$.fragment, local);
      transition_in(linkable2.$$.fragment, local);
      transition_in(linkable3.$$.fragment, local);
      transition_in(linkable4.$$.fragment, local);
      transition_in(linkable5.$$.fragment, local);
      transition_in(linkable6.$$.fragment, local);
      transition_in(linkable7.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkable0.$$.fragment, local);
      transition_out(linkable1.$$.fragment, local);
      transition_out(linkable2.$$.fragment, local);
      transition_out(linkable3.$$.fragment, local);
      transition_out(linkable4.$$.fragment, local);
      transition_out(linkable5.$$.fragment, local);
      transition_out(linkable6.$$.fragment, local);
      transition_out(linkable7.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(linkable0);
      destroy_component(linkable1);
      destroy_component(linkable2);
      destroy_component(linkable3);
      destroy_component(linkable4);
      destroy_component(linkable5);
      destroy_component(linkable6);
      destroy_component(linkable7);
    }
  };
}
function create_fragment(ctx) {
  let div;
  let navigation;
  let current;
  navigation = new Navigation({
    props: {
      last: ["/info/hq", "HQ"],
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(navigation.$$.fragment);
      this.h();
    },
    l(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(navigation.$$.fragment, div_nodes);
      div_nodes.forEach(detach);
      this.h();
    },
    h() {
      attr(div, "class", "container");
    },
    m(target, anchor) {
      insert_hydration(target, div, anchor);
      mount_component(navigation, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const navigation_changes = {};
      if (dirty & /*$$scope*/
      1) {
        navigation_changes.$$scope = { dirty, ctx: ctx2 };
      }
      navigation.$set(navigation_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(navigation.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(navigation.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(navigation);
    }
  };
}
class Page extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {});
  }
}
export {
  Page as default
};
